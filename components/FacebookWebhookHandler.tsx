import React, { useEffect, useState } from 'react';
import {
    Alert,
    RefreshControl,
    ScrollView,
    StyleSheet,
    Text,
    TouchableOpacity,
    View
} from 'react-native';
import FacebookService from '../services/FacebookService';
import { FacebookIntegration, FacebookLead } from '../types/facebook';

interface WebhookEvent {
  id: string;
  timestamp: string;
  leadId: string;
  formId: string;
  pageId: string;
  status: 'processing' | 'success' | 'error';
  error?: string;
  leadData?: FacebookLead;
}

interface FacebookWebhookHandlerProps {
  integration: FacebookIntegration;
  onLeadProcessed: (lead: FacebookLead) => void;
}

const FacebookWebhookHandler: React.FC<FacebookWebhookHandlerProps> = ({
  integration,
  onLeadProcessed,
}) => {
  const [webhookEvents, setWebhookEvents] = useState<WebhookEvent[]>([]);
  const [loading, setLoading] = useState(false);
  const [refreshing, setRefreshing] = useState(false);
  const [webhookUrl, setWebhookUrl] = useState<string>('');
  const [webhookSecret, setWebhookSecret] = useState<string>('');

  const facebookService = FacebookService.getInstance();

  useEffect(() => {
    loadWebhookEvents();
    generateWebhookCredentials();
  }, [integration]);

  const generateWebhookCredentials = () => {
    // In a real app, these would be generated by the backend
    const mockWebhookUrl = `https://your-app.com/api/facebook/webhook/${integration.id}`;
    const mockWebhookSecret = `webhook_secret_${integration.id}_${Date.now()}`;
    
    setWebhookUrl(mockWebhookUrl);
    setWebhookSecret(mockWebhookSecret);
  };

  const loadWebhookEvents = async () => {
    try {
      setLoading(true);
      // In a real app, this would fetch from your backend
      const mockEvents: WebhookEvent[] = [
        {
          id: 'event1',
          timestamp: '2024-01-15T10:30:00Z',
          leadId: 'lead123',
          formId: integration.form_id,
          pageId: integration.page_id,
          status: 'success',
          leadData: {
            id: 'lead123',
            created_time: '2024-01-15T10:30:00Z',
            field_data: [
              { name: 'full_name', values: ['John Doe'] },
              { name: 'email', values: ['john@example.com'] },
              { name: 'phone_number', values: ['555-1234'] },
            ],
            form_id: integration.form_id,
          },
        },
        {
          id: 'event2',
          timestamp: '2024-01-15T09:15:00Z',
          leadId: 'lead124',
          formId: integration.form_id,
          pageId: integration.page_id,
          status: 'error',
          error: 'Field mapping not configured',
        },
        {
          id: 'event3',
          timestamp: '2024-01-15T08:45:00Z',
          leadId: 'lead125',
          formId: integration.form_id,
          pageId: integration.page_id,
          status: 'processing',
        },
      ];

      setWebhookEvents(mockEvents);
    } catch (error) {
      console.error('Error loading webhook events:', error);
      Alert.alert('Error', 'Failed to load webhook events');
    } finally {
      setLoading(false);
    }
  };

  const handleRefresh = async () => {
    setRefreshing(true);
    await loadWebhookEvents();
    setRefreshing(false);
  };

  const handleTestWebhook = async () => {
    try {
      Alert.alert(
        'Test Webhook',
        'This will send a test webhook event to verify your integration is working correctly.',
        [
          { text: 'Cancel', style: 'cancel' },
          {
            text: 'Send Test',
            onPress: async () => {
              // In a real app, this would trigger a test webhook
              const testEvent: WebhookEvent = {
                id: `test_${Date.now()}`,
                timestamp: new Date().toISOString(),
                leadId: 'test_lead',
                formId: integration.form_id,
                pageId: integration.page_id,
                status: 'processing',
              };

              setWebhookEvents(prev => [testEvent, ...prev]);
              Alert.alert('Success', 'Test webhook sent successfully!');
            },
          },
        ]
      );
    } catch (error) {
      console.error('Error sending test webhook:', error);
      Alert.alert('Error', 'Failed to send test webhook');
    }
  };

  const handleProcessLead = async (event: WebhookEvent) => {
    if (!event.leadData) return;

    try {
      // In a real app, this would process the lead through your CRM
      onLeadProcessed(event.leadData);
      
      setWebhookEvents(prev =>
        prev.map(e =>
          e.id === event.id
            ? { ...e, status: 'success' as const }
            : e
        )
      );

      Alert.alert('Success', 'Lead processed successfully!');
    } catch (error) {
      console.error('Error processing lead:', error);
      
      setWebhookEvents(prev =>
        prev.map(e =>
          e.id === event.id
            ? { ...e, status: 'error' as const, error: 'Failed to process lead' }
            : e
        )
      );

      Alert.alert('Error', 'Failed to process lead');
    }
  };

  const handleRetryEvent = async (event: WebhookEvent) => {
    try {
      setWebhookEvents(prev =>
        prev.map(e =>
          e.id === event.id
            ? { ...e, status: 'processing' as const, error: undefined }
            : e
        )
      );

      // Simulate processing
      setTimeout(() => {
        setWebhookEvents(prev =>
          prev.map(e =>
            e.id === event.id
              ? { ...e, status: 'success' as const }
              : e
          )
        );
      }, 2000);

    } catch (error) {
      console.error('Error retrying event:', error);
      Alert.alert('Error', 'Failed to retry event');
    }
  };

  const getStatusColor = (status: WebhookEvent['status']) => {
    switch (status) {
      case 'success':
        return '#10b981';
      case 'error':
        return '#ef4444';
      case 'processing':
        return '#f59e0b';
      default:
        return '#6b7280';
    }
  };

  const getStatusText = (status: WebhookEvent['status']) => {
    switch (status) {
      case 'success':
        return 'Processed';
      case 'error':
        return 'Failed';
      case 'processing':
        return 'Processing';
      default:
        return 'Unknown';
    }
  };

  const renderWebhookInfo = () => (
    <View style={styles.section}>
      <Text style={styles.sectionTitle}>Webhook Configuration</Text>
      <View style={styles.infoContainer}>
        <View style={styles.infoRow}>
          <Text style={styles.infoLabel}>Webhook URL:</Text>
          <Text style={styles.infoValue} numberOfLines={2}>{webhookUrl}</Text>
        </View>
        <View style={styles.infoRow}>
          <Text style={styles.infoLabel}>Webhook Secret:</Text>
          <Text style={styles.infoValue}>{webhookSecret}</Text>
        </View>
        <View style={styles.infoRow}>
          <Text style={styles.infoLabel}>Status:</Text>
          <Text style={[styles.infoValue, styles.statusActive]}>Active</Text>
        </View>
      </View>

      <TouchableOpacity
        style={styles.testButton}
        onPress={handleTestWebhook}
      >
        <Text style={styles.testButtonText}>Send Test Webhook</Text>
      </TouchableOpacity>
    </View>
  );

  const renderWebhookEvents = () => (
    <View style={styles.section}>
      <Text style={styles.sectionTitle}>Recent Webhook Events</Text>
      <Text style={styles.sectionDescription}>
        Monitor webhook events and lead processing status.
      </Text>

      <ScrollView style={styles.eventsContainer}>
        {webhookEvents.map((event) => (
          <View key={event.id} style={styles.eventCard}>
            <View style={styles.eventHeader}>
              <View style={styles.eventInfo}>
                <Text style={styles.eventId}>Lead #{event.leadId}</Text>
                <Text style={styles.eventTimestamp}>
                  {new Date(event.timestamp).toLocaleString()}
                </Text>
              </View>
              <View style={styles.eventStatus}>
                <View style={[
                  styles.statusIndicator,
                  { backgroundColor: getStatusColor(event.status) }
                ]} />
                <Text style={[
                  styles.statusText,
                  { color: getStatusColor(event.status) }
                ]}>
                  {getStatusText(event.status)}
                </Text>
              </View>
            </View>

            {event.error && (
              <View style={styles.errorContainer}>
                <Text style={styles.errorText}>{event.error}</Text>
              </View>
            )}

            {event.leadData && (
              <View style={styles.leadDataContainer}>
                <Text style={styles.leadDataTitle}>Lead Data:</Text>
                {event.leadData.field_data.slice(0, 3).map((field, index) => (
                  <Text key={index} style={styles.leadDataField}>
                    {field.name}: {field.values[0]}
                  </Text>
                ))}
                {event.leadData.field_data.length > 3 && (
                  <Text style={styles.leadDataMore}>
                    +{event.leadData.field_data.length - 3} more fields
                  </Text>
                )}
              </View>
            )}

            <View style={styles.eventActions}>
              {event.status === 'error' && (
                <TouchableOpacity
                  style={styles.retryButton}
                  onPress={() => handleRetryEvent(event)}
                >
                  <Text style={styles.retryButtonText}>Retry</Text>
                </TouchableOpacity>
              )}

              {event.status === 'success' && event.leadData && (
                <TouchableOpacity
                  style={styles.processButton}
                  onPress={() => handleProcessLead(event)}
                >
                  <Text style={styles.processButtonText}>Process Lead</Text>
                </TouchableOpacity>
              )}
            </View>
          </View>
        ))}
      </ScrollView>
    </View>
  );

  return (
    <View style={styles.container}>
      <ScrollView
        style={styles.content}
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={handleRefresh} />
        }
      >
        {renderWebhookInfo()}
        {renderWebhookEvents()}
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  content: {
    flex: 1,
    padding: 20,
  },
  section: {
    marginBottom: 24,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1a1a1a',
    marginBottom: 8,
  },
  sectionDescription: {
    fontSize: 14,
    color: '#6b7280',
    marginBottom: 16,
    lineHeight: 20,
  },
  infoContainer: {
    backgroundColor: '#f3f4f6',
    padding: 16,
    borderRadius: 8,
    marginBottom: 16,
  },
  infoRow: {
    flexDirection: 'row',
    marginBottom: 8,
  },
  infoLabel: {
    fontSize: 14,
    fontWeight: '600',
    color: '#1a1a1a',
    width: 120,
  },
  infoValue: {
    fontSize: 14,
    color: '#6b7280',
    flex: 1,
  },
  statusActive: {
    color: '#10b981',
    fontWeight: '600',
  },
  testButton: {
    backgroundColor: '#1877f2',
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    alignItems: 'center',
  },
  testButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  eventsContainer: {
    maxHeight: 400,
  },
  eventCard: {
    backgroundColor: '#fff',
    borderRadius: 8,
    padding: 16,
    marginBottom: 12,
    borderWidth: 1,
    borderColor: '#e1e5e9',
  },
  eventHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  eventInfo: {
    flex: 1,
  },
  eventId: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1a1a1a',
    marginBottom: 4,
  },
  eventTimestamp: {
    fontSize: 12,
    color: '#6b7280',
  },
  eventStatus: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  statusIndicator: {
    width: 8,
    height: 8,
    borderRadius: 4,
    marginRight: 6,
  },
  statusText: {
    fontSize: 12,
    fontWeight: '600',
  },
  errorContainer: {
    backgroundColor: '#fef2f2',
    padding: 12,
    borderRadius: 6,
    marginBottom: 12,
  },
  errorText: {
    fontSize: 14,
    color: '#ef4444',
  },
  leadDataContainer: {
    backgroundColor: '#f3f4f6',
    padding: 12,
    borderRadius: 6,
    marginBottom: 12,
  },
  leadDataTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: '#1a1a1a',
    marginBottom: 8,
  },
  leadDataField: {
    fontSize: 12,
    color: '#6b7280',
    marginBottom: 4,
  },
  leadDataMore: {
    fontSize: 12,
    color: '#1877f2',
    fontStyle: 'italic',
  },
  eventActions: {
    flexDirection: 'row',
    gap: 8,
  },
  retryButton: {
    backgroundColor: '#f59e0b',
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderRadius: 6,
  },
  retryButtonText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: '600',
  },
  processButton: {
    backgroundColor: '#10b981',
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderRadius: 6,
  },
  processButtonText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: '600',
  },
});

export default FacebookWebhookHandler;
